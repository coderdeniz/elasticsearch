
Elasticsearch nedir? 
-> open source bir search engine'dir.
-> java diliyle geliþtirilmiþtir.
-> diðer db'lerden güçlü yaný full-text search olmasýdýr yani text'ler üzerinde arama performansý diðerlerinden daha yüksektir.
örnek senaryo: word dosyalarýnýn atýldýðý bir sistemde aranan key'e göre dökümanlarý search edip önüne getirmesi..
-> nosql db'dir. json kullanýr.
-> diðer nosql'e göre arama özelliðine odakladýr.
-> Apache Lucene isimli search engine altyapýsýný kullanýyor bu sayede search'i çok performanslý. Apache Lucene altyapý, elasticsearch app diyebiliriz.
-> hacimli datalarda arama yapmak için kullanýlýr.
-> sahibinden'deki araba arama kýsmý gibi milyonlarca data içinde kolayca arama yapmak için kullanýlýr.
-> nosql olduðu için iliþkisel bir yapý yoktur. datalar json olarak kaydediliyor datalar arasý iliþki yoktur. Yani bir kategori silinirken onun ürünleri silinmez.
-> arama gücünü index'lemeden saðlýyor. Normal sql db'lerdede en çok aranan sütun index'lenir performans artar, elastic'te ise her data tek tek index'leniyor bu yüzden arama performansý çok yüksektir.


Elasticsearch yetenekleri
-> structured ve unstructured datalarda arama yapabilir. (fiyat tarih gibi yapýlar structured'dir, text dosyasý üzerinde arama yapmasý, haber datasý üzerinde arama yapmasý full text search worddosyasýnda arama yapmasý unstructured'dir.)
-> arama yaptýktan sonra en iliþkiliden en iliþkisize doðru gider.
-> "þunu mu denemek istediniz" yapabiliriz.
-> hatalý/eksik aramalarda iyileþtirme yapabiliyor. (megne, kitp gibi)
-> belli bir coðrafi lokasyonda aranan þeyi bulurken (kare þeklinde belirlenmiþ 4 enlem ve boylam deðeri içerisindeki datalarda arama yapabiliriz)
-> yatayda ölçeklenebilir
-> hýzlý arama ve hýzlý indexleme
-> hatalarý tolere edebilir, high-availability(sistem her zaman ayakta olmalýdýr, sistemde kýsmi hatalarda performansýndan ödün verebilir) fault-tolerant distributed system(sistemde kýsmi hata geldiðinde(mesala elastic'in kurulu olduðu vm'lerden birinin çökmesi gibi) performansý etkilemeden çalýþmaya devam etmelidir)


Komponentler:

Kibana: elasticsearch içerisinde kaydedilen datalar üzerinde sorgulama yapabilmemizi saðlayan bir web ui'dir. Tek bir satýr kod yazmadan UI üzerinden arama yapabiliyoruz. Kendine özgü sorgu dili vardýr.

Logstash: datalarý iþleme motoru, datalarý iþleyip elasticsearch'e gönderiyor.

Beats: datalarý toplama iþlemini gören component, fileBeat, dosyadan loglarý alýyor logstash'e gönderiyor. metricbeat: cpu kullanýmý vs gibi datalar toplanýp logstah'e veya direk elasticsearch'e gönderiliyor.



Elasticsearch Mimarisi:

Document: Elastic searche eklenen data documenttir. Elasticsearch json datayý okur ve onu kendi özel data tiplerine dönüþtürür.

Index: Bir konuyla alakalý dökümanlarýn bulunduðu gruba index denir. Sql db'deki tablolar gibi ya da noSql'deki Collection gibi, Product indexi

Indexleme: datayý kaydetmek demek, datayý analiz eder ve indexler. amaç datayý sorgularken hýzlý þekilde getirebilmesi için. Diðer db'lerden farklý olarak elasticsearch datayý analiz eder ve daha mantýklý indexler.

DataStream: Zaman temelli data, her gün için bir index tablosu mesala loglar için index tablolarý örnek: log-1.12-12-2023 ve log-1.12-13-2023 ve microservice-1.logs-data-stream
takma isim verilebilir. Birde fazla index dosyalarýný tutabilmek için alias. Loglarda genelde yapýlýr.

Cluster: birden fazla sanal sunucuda ayaða kaldýrýlan (node) yapýya cluster denir.

Shard: asýl datayý tutan componentlerdir. örnek product.json. Her node'da bir shard vardýr. Hangi node'daki sharda gideceðini biz de belirleyebiliriz.

Index: Farklý shardda tutulan datalarýn tamamý index oluyor tablo gibi. Örnek shard-1 3 data, shard-2 5 data, shard-3 8 data toplam index 16 data gibi

Replicate: Shardlarýn tam kopyasýdýr. Readonly'dir. Sistem çökmesi durumunda hizmet verir. Shard ile replicate farklý node'larda olmalý.

High availability: Sistemde sýkýntý meydana geldiðinde yavaþlama olur ama çalýþmaya devam eder.

Fault tolerans: Yüksek olduðu zaman sistem kendini onarýr ve yavaþlama olmaz. Ama maliyet getirir.

Text analyzing: data elastice kaydedilmeden önce analizden geçiyor ondan sonra kaydediliyor. Analizdeki amaç indexlemedir.

Tokenization: gelen datayý parçalarý boþluklara göre ayýrýyor. 

Normalization: parçalara ayrýlan datanýn zenginleþtirilmesi, mesala sýcaktý kelimesinden sýcak kelimesi alýnýr. Covid kelimesinden korona alýnmasý gibi. Bu datalar
inverted index'e kaydedilir. Bunlar için pluginler var

Segment: Shardlara gelen datalar segment denen kýsýmlara kaydediliyor.

Inverted Index Tablolarý: Tokenization ve normalization süreçlerinden geçen data index denen tablolara kaydediliyor. Her textin hangi sharpta olduðunu yerini belirtir. Ýçindekiler kýsmý gibi. Inverted Index'te hangi dökümanlarda ne kadar sýklýðý geçtiði tutuyor. Sýralamada ilk baþta en yüksek frekanslý (cümle içerisinde ne kadar geçiyorsa) olanlar baþta duruyor.

Relevancy(alaka): Ýliþki skor deðeridir. Aranan kelime ile o kelimenin ne kadar iliþkili olduðunu gösterir. BM25 algoritmasýna göre skor deðeri üretilir ona göre en alakalý sonuçlar döner. Text temelli datalarda iþe yarar.


--------------


Elasticsearch Setup 









